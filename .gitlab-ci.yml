# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/user/application_security/secret_detection/pipeline/configure
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence
stages:
  - test
  - security
  - release
  - validate

image: python:3.11

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  SAST_STAGE: security
  SECRET_DETECTION_STAGE: security
  SECRET_DETECTION_ENABLED: "true"

cache:
  paths:
    - .cache/pip

pytest:
  stage: test
  script:
    - python -m pip install --upgrade pip -q
    - pip install -r requirements-test.txt -q
    - pytest -q
  artifacts:
    when: always
    reports:
      junit: junit.xml
    paths:
      - junit.xml
      - .pytest_cache
    expire_in: 1 week

# PyPI publish for final releases (e.g. 1.2.3)
publish-pypi:
  stage: release
  script:
    - python -m pip install --upgrade build twine
    - python -m build
    - twine upload dist/* -u __token__ -p $PYPI_TOKEN
  rules:
    - if: '$CI_COMMIT_TAG =~ /^\d+\.\d+\.\d+$/'

# Test PyPI publish for release candidates (e.g. 1.2.3rc1)
publish-testpypi:
  stage: release
  script:
    - python -m pip install --upgrade build twine
    - python -m build
    - twine upload --repository testpypi dist/* -u __token__ -p $TEST_PYPI_TOKEN
  rules:
    - if: '$CI_COMMIT_TAG =~ /^\d+\.\d+\.\d+rc\d+$/'

# SSH deploy for testing environment (for RCs only)
deploy-testing:
  stage: release
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh
  script:
    - echo "$SSH_TESTING_KEY" > key.pem
    - chmod 600 key.pem
    - ssh -i key.pem -o StrictHostKeyChecking=no $SSH_TESTING_USER@$SSH_TESTING_HOST "bash -s" < ./scripts/deploy_testing.sh
  rules:
    - if: '$CI_COMMIT_TAG =~ /^\d+\.\d+\.\d+rc\d+$/'

# Validate service in staging environment (for final releases only)
check-alive-staging:
  stage: validate
  image: curlimages/curl:latest
  script:
    - echo "🔍 Checking if service is alive on $STAGING_HOST"
    - curl -sf http://$STAGING_HOST/health/live || (echo "❌ Service not live" && exit 1)
  rules:
    - if: '$CI_COMMIT_TAG =~ /^\d+\.\d+\.\d+$/'

# Manual deploy to production environment
deploy-prod:
  stage: release
  when: manual
  script:
    - echo "🚀 Manual deploy to production initiated. Configure the job."

include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml
